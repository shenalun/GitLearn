/*
Git是分布式版本控制系统，--global参数表示这台机器上所有的Git仓库都会使用这个配置
也可以对某个仓库指定不同的用户名和Email
*/
01	git config --global user.name "shenalun"
02	git config --global user.email "shenalun@163.com"
===========================================================================================
/*
把当前目录初始化成Git可以管理的目录,当前目录下出现的.git文件就是用来跟踪管理版本库的
*/
03	git init
===========================================================================================
/*
把文件xxx添加到暂存区
*/
04	git add xxx
===========================================================================================
/*
把文件xxx提交到仓库,-m后面输入的是本次提交的说明，最好有意义，方便从历史记录里找到改动
commit可以一次提交很多文件，可以多次add不同的文件，比如：
	git add file1.txt
	git add file2.txt file3.txt
	git commit -m "add 3 files"
*/
05	git commit -m "read_me"
===========================================================================================
/*
时刻掌握仓库当前的状态,git status指示有文件改动,git diff可以查看修改内容
*/
06	git status
===========================================================================================
/*
工作区与暂存区之间文件版本的差异,如果已经commit，则对比工作区与仓库的版本差异
如果仅仅是add,没有commit,对比工作区与暂存区版本差异
*/
07	git diff 
===========================================================================================
/*
显示从最近到最远的提交日志，可以加上--pretty=oneline参数,comint id号是一大串数字
*/
08	git log
08	git log --pretty=oneline
===========================================================================================
/*
在Git中HEAD表示当前版本，上一个版本是HEAD^,上上个版本是HEAD^^,HEAD~3指的是上3个版本,以此类
推HEAD~n 代表上n个版本,版本回退,该命令执行后，用git log则查不到(回退后的版本)之后提交的记录
*/
09	git reset --hard HEAD^
===========================================================================================
/*
若回退版本后,再想回去，如果当前命令行窗口没有关闭，则顺着窗口往上找，找到提交的commit id,可以
通过指定commit id 的方式回到指定的版本,该指是一大串哈希值，可以简写前几个数字，Git自动索引
git版本回退的速度非常快，git内部有个指向当前版本的HEAD指针，当回退版本时，Git仅仅是把HEAD指针
的指向移动个位置，顺便把工作区给更新了，故HEAD指向哪个版本号，当前版本就定位在哪。
*/
10	git reset--hard <commit id>
===========================================================================================
/*
若窗口关闭,关闭电脑,仍然想恢复到最新版本,找不到commit id可以使用以下命令,该命令记录用户每一次
命令,git log 可以查看提交历史，以便确定要回到哪个版本；git reflog 查看命令历史，以便确定要回到
哪个版本
*/
11	git reflog
===========================================================================================
/*
丢弃工作区的修改：1、若文件自修改后还没有放到暂存区，那么执行这个命令撤销修改就回到版本库一模
一样的状态；2、文件已经添加到暂存区，又做了修改，那么撤销修改就回到添加到暂存区后的状态。
总之该命令将文件回到最近一次git commit 或 git add 状态
*/
12	git checkout -- file 
12	git restore  -- file
===========================================================================================
/*
丢弃暂存区的修改,即文件不暂存，回到工作区状态，在commit之前，把暂存区的修改撤销掉，回到
工作区当前状态，即工作区目前是什么状态就保持在什么状态
*/
13	git reset HEAD file
13	git	restore --staged file
===========================================================================================
总结：
场景1：当改乱了工作区某个文件内容，想直接丢弃工作区的修改时，用命令git checkout -- file；
场景2：当不但改乱了工作区某个文件的内容，还添加到了暂存区，像丢弃修改分两步，第一步用
	git reset HEAD file，就回到场景1，第二步按场景1操作；
场景3：已经提交了改乱的代码到版本库，想要撤销本次提交，可以使用版本回退，前提是没有推送
	到远程库
===========================================================================================
/*
在Git中，删除也是一个修改操作，前提是该文件被Git管理。若在文件管理器中删除没用的文件，Git会告知
工作区和版本库不一致，且会告知哪些文件被删除，如果确实需要从版本库中删除该文件使用以下命令，并且
git commit
*/
14	git rm file 
	git commit -m"remove something"
/*
另一种情况是删错了，版本库里仍然存在，那么可以使用(丢弃工作区的修改)命令，可以很轻松的把误删的文件
恢复到版本库里面最新版，本质是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，该命令
都可以一键还原，若文件已经提交到版本库，那么永远不用担心误删，但是，只能恢复文件到版本库最新版，
会丢失提交后你继续修改的内容
*/
15	git checkout -- file (the same as 12)
===========================================================================================
